package com.nofrontier.book.domain.services;

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;

import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.PagedModel;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.validation.FieldError;

import com.nofrontier.book.api.v1.controller.PersonController;
import com.nofrontier.book.api.v1.controller.UserController;
import com.nofrontier.book.core.modelmapper.ModelMapperConfig;
import com.nofrontier.book.core.security.jwt.JwtTokenProvider;
import com.nofrontier.book.domain.exceptions.PasswordDoesntMatchException;
import com.nofrontier.book.domain.exceptions.RequiredObjectIsNullException;
import com.nofrontier.book.domain.exceptions.ResourceNotFoundException;
import com.nofrontier.book.domain.model.Person;
import com.nofrontier.book.domain.repository.UserRepository;
import com.nofrontier.book.dto.v1.PersonDto;
import com.nofrontier.book.dto.v1.UserDto;
import com.nofrontier.book.dto.v1.security.TokenDto;
import com.nofrontier.book.dto.v1.security.UserRegisterResponse;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Service
public class UserService  {
	
	private Logger logger = Logger.getLogger(UserService.class.getName());


	@Autowired
	PagedResourcesAssembler<UserDto> assembler;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private JwtTokenProvider tokenProvider;

    @Autowired
    private PasswordEncoder passwordEncoder;

//    @Autowired
//    private UserValidator validator;
//
//    @Autowired
//    private StorageService storageService;
//
//    @Autowired
//    private NewUserPublisher newUserPublisher;
    
	public PagedModel<EntityModel<UserDto>> findAll(Pageable pageable) {
		logger.info("Finding all users!");
		var userPage = userRepository.findAll(pageable);
		var userDtoPage = userPage.map(u -> ModelMapperConfig.parseObject(u, UserDto.class));
		userDtoPage.map(u -> u.add(linkTo(methodOn(UserController.class).findById(u.getKey())).withSelfRel()));
		Link link = linkTo(
				methodOn(UserController.class).findAll(pageable.getPageNumber(), pageable.getPageSize(), "asc"))
				.withSelfRel();
		return assembler.toModel(userDtoPage, link);
	}
	
	// -------------------------------------------------------------------------------------------------------------

	public UserDto findById(Long id) {
		logger.info("Finding one user!");
		var entity = userRepository.findById(id)
				.orElseThrow(() -> new ResourceNotFoundException("No records found for this ID!"));
		var dto = ModelMapperConfig.parseObject(entity, UserDto.class);
		dto.add(linkTo(methodOn(UserController.class).findById(id)).withSelfRel());
		return dto;
	}

	// -------------------------------------------------------------------------------------------------------------

	public PersonDto create(PersonDto person) {
		if (person == null)
			throw new RequiredObjectIsNullException();
		logger.info("Creating one person!");
		var entity = ModelMapperConfig.parseObject(person, Person.class);
		var vo = ModelMapperConfig.parseObject(personRepository.save(entity), PersonDto.class);
		vo.add(linkTo(methodOn(PersonController.class).findById(vo.getKey())).withSelfRel());
		return vo;
	}
	
	
    public UserDto create(UserDto userDto) {
        validatePasswordConfirmation(userDto);
        var userToSave= mapper.toModel(userDto);
        validator.validate(userToSave);
        var passwordEncrypted= passwordEncoder.encode(userToSave.getPassword());
        userToSave.setPassword(passwordEncrypted);
        var documentPicture= storageService.save(userDto.getDocumentPicture());
        userToSave.setDocumentPicture(documentPicture);

        var userSaved= repository.save(userToSave);
        newUserPublisher.publish(userSaved);
        var response= mapper.toRegisterResponse(userSaved);
        var tokenResponse= generateTokenResponse(response);
        response.setToken(tokenResponse);
        return response;
    }


    
    

    private void validatePasswordConfirmation(UserDto userDto) {
        var password= userDto.getPassword();
        var passwordConfirmation= userDto.getPasswordConfirmation();
        if (!password.equals(passwordConfirmation)) {
            var message= "the two password fields do not match";
            var fieldError= new FieldError(userDto.getClass().getName(), "passwordConfirmation",
            		userDto.getPasswordConfirmation(), false, null, null, message);
            throw new PasswordDoesntMatchException(message, fieldError);
        }
    }

    private TokenDto generateTokenResponse(UserRegisterResponse response) {
        var token= tokenProvider.createAccessToken(response.getUsername(), List<String> roles);
        var refresh= tokenProvider.refreshToken(response.getUsername());
        var tokenDto = new TokenDto();
        return tokenDto;
    }



}