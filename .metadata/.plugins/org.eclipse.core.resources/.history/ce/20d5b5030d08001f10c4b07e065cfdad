package com.nofrontier.book.domain.services;

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;
import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;

import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.PagedModel;
import org.springframework.security.core.token.TokenService;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.validation.FieldError;

import com.nofrontier.book.api.v1.controller.PersonController;
import com.nofrontier.book.api.v1.controller.UserController;
import com.nofrontier.book.core.modelmapper.ModelMapperConfig;
import com.nofrontier.book.domain.repository.UserRepository;
import com.nofrontier.book.dto.v1.PersonDto;
import com.nofrontier.book.dto.v1.UserDto;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Service
public class UserService  {
	
	private Logger logger = Logger.getLogger(UserService.class.getName());


	@Autowired
	PagedResourcesAssembler<UserDto> assembler;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private TokenService tokenService;

    @Autowired
    private PasswordEncoder passwordEncoder;

//    @Autowired
//    private UserValidator validator;
//
//    @Autowired
//    private StorageService storageService;
//
//    @Autowired
//    private NewUserPublisher newUserPublisher;
    
	public PagedModel<EntityModel<UserDto>> findAll(Pageable pageable) {
		logger.info("Finding all people!");
		var userPage = userRepository.findAll(pageable);
		var userDtoPage = userPage.map(p -> ModelMapperConfig.parseObject(u, UserDto.class));
		userDtoPage.map(u -> u.add(linkTo(methodOn(UserController.class).findById(p.getKey())).withSelfRel()));
		Link link = linkTo(
				methodOn(UserController.class).findAll(pageable.getPageNumber(), pageable.getPageSize(), "asc"))
				.withSelfRel();
		return assembler.toModel(userDtoPage, link);
	}

    public UserResponse create(UserRequest request) {
        validatePasswordConfirmation(request);
        var userToSave= mapper.toModel(request);
        validator.validate(userToSave);
        var passwordEncrypted= passwordEncoder.encode(userToSave.getPassword());
        userToSave.setPassword(passwordEncrypted);
        var documentPicture= storageService.save(request.getDocumentPicture());
        userToSave.setDocumentPicture(documentPicture);

        if (userToSave.isHousekeeper()) {
            var averageReputation= calculateHousekepperAverageReputation();
            userToSave.setReputation(averageReputation);
        }

        var userSaved= repository.save(userToSave);
        newUserPublisher.publish(userSaved);
        var response= mapper.toRegisterResponse(userSaved);
        var tokenResponse= generateTokenResponse(response);
        response.setToken(tokenResponse);
        return response;
    }

    private Double calculateHousekepperAverageReputation() {
        var averageReputation= repository.getHousekeeperAverageReputation();
        if (averageReputation == null || averageReputation == 0.0) {
            averageReputation= 5.0;
        }
        return averageReputation;
    }

    private void validatePasswordConfirmation(UserRequest request) {
        var password= request.getPassword();
        var passwordConfirmation= request.getPasswordConfirmation();
        if (!password.equals(passwordConfirmation)) {
            var message= "the two password fields do not match";
            var fieldError= new FieldError(request.getClass().getName(), "passwordConfirmation",
                request.getPasswordConfirmation(), false, null, null, message);
            throw new PasswordDoesntMatchException(message, fieldError);
        }
    }

    private TokenResponse generateTokenResponse(UserRegisterResponse response) {
        var token= tokenService.generateAccessToken(response.getEmail());
        var refresh= tokenService.generateRefreshToken(response.getEmail());
        var tokenResponse= new TokenResponse(token, refresh);
        return tokenResponse;
    }



}