package com.nofrontier.book.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.access.AccessDeniedHandler;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.nofrontier.book.core.security.jwt.JwtTokenFilter;

import lombok.RequiredArgsConstructor;

@Configuration
@RequiredArgsConstructor
@EnableWebSecurity
// @EnableMethodSecurity(securedEnabled = true, jsr250Enabled = true)
public class SecurityConfig {

	@Autowired
	private UserDetailsService userDetailsService;

	@Autowired
	private PasswordEncoder passwordEncoder;

	@Autowired
	private AuthenticationEntryPoint authenticationEntryPoint;

	@Autowired
	private AccessDeniedHandler accessDeniedHandler;

	@Bean
	AuthenticationManager authenticationManager(
			AuthenticationConfiguration authenticationConfiguration)
			throws Exception {
		return authenticationConfiguration.getAuthenticationManager();
	}

	@Bean
	SecurityFilterChain filterChain(HttpSecurity http) throws Exception {

		JwtTokenFilter customFilter = new JwtTokenFilter(tokenProvider);

		http.httpBasic(AbstractHttpConfigurer::disable)
				.csrf(AbstractHttpConfigurer::disable)
				.cors(AbstractHttpConfigurer::disable)
				.addFilterBefore(customFilter,
						UsernamePasswordAuthenticationFilter.class)
				.sessionManagement(session -> session.sessionCreationPolicy(
						SessionCreationPolicy.STATELESS));

		http.authorizeHttpRequests(
				requestMatcherCustomizer -> requestMatcherCustomizer
						.requestMatchers("/**").permitAll())
				.authorizeHttpRequests(
						authorizeRequestsCustomizer -> authorizeRequestsCustomizer
								.requestMatchers("/**").permitAll()
								.requestMatchers(HttpMethod.POST,
										"/auth/signin")
								.permitAll()
								.requestMatchers("/css/**", "/js/**", "/img/**",
										"/lib/**", "/favicon.ico")
								.permitAll()
								.requestMatchers("/auth/refresh/**",
										"/swagger-ui/**", "/v3/api-docs/**")
								.permitAll().anyRequest().authenticated())
				.exceptionHandling(
						exceptionHandlingCustomizer -> exceptionHandlingCustomizer
								.authenticationEntryPoint(
										authenticationEntryPoint)
								.accessDeniedHandler(accessDeniedHandler));
		return http.build();
	}

}
