package com.nofrontier.book.config;

import java.util.HashMap;
import java.util.Map;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.password.DelegatingPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.crypto.password.Pbkdf2PasswordEncoder;
import org.springframework.security.crypto.password.Pbkdf2PasswordEncoder.SecretKeyFactoryAlgorithm;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.access.AccessDeniedHandler;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.nofrontier.book.core.security.jwt.JwtTokenFilter;
import com.nofrontier.book.core.security.jwt.JwtTokenProvider;

import lombok.RequiredArgsConstructor;

@Configuration
@RequiredArgsConstructor
@EnableWebSecurity
// @EnableMethodSecurity(securedEnabled = true, jsr250Enabled = true)
public class SecurityConfig {

	private final JwtTokenProvider tokenProvider;

	private final AuthenticationEntryPoint authenticationEntryPoint;

	private final AccessDeniedHandler accessDeniedHandler;

	@Bean
	PasswordEncoder passwordEncoder() {
		Map<String, PasswordEncoder> encoders = new HashMap<>();

		Pbkdf2PasswordEncoder pbkdf2Encoder = new Pbkdf2PasswordEncoder("", 8,
				185000, SecretKeyFactoryAlgorithm.PBKDF2WithHmacSHA256);
		encoders.put("pbkdf2", pbkdf2Encoder);
		DelegatingPasswordEncoder passwordEncoder = new DelegatingPasswordEncoder(
				"pbkdf2", encoders);
		passwordEncoder.setDefaultPasswordEncoderForMatches(pbkdf2Encoder);
		return passwordEncoder;
	}

	@Bean
	AuthenticationManager authenticationManagerBean(
			AuthenticationConfiguration authenticationConfiguration)
			throws Exception {
		return authenticationConfiguration.getAuthenticationManager();
	}

	@Bean
	SecurityFilterChain filterChain(HttpSecurity http) throws Exception {

		JwtTokenFilter customFilter = new JwtTokenFilter(tokenProvider);

		http.httpBasic(AbstractHttpConfigurer::disable)
		.csrf(AbstractHttpConfigurer::disable)
		.cors(AbstractHttpConfigurer::disable)
		.addFilterBefore(customFilter,
				UsernamePasswordAuthenticationFilter.class)
		.sessionManagement(session -> session
				.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
		
		http.authorizeHttpRequests(
				requestMatcherCustomizer -> requestMatcherCustomizer
						.requestMatchers("/**").permitAll())
				.authorizeHttpRequests(
						authorizeRequestsCustomizer -> authorizeRequestsCustomizer
								.requestMatchers("/**").permitAll()
								.requestMatchers(HttpMethod.POST, "/auth/signin")
								.permitAll()
								.requestMatchers("/css/**", "/js/**", "/img/**",
										"/lib/**", "/favicon.ico")
								.permitAll()
								.requestMatchers("/auth/refresh/**",
										"/swagger-ui/**", "/v3/api-docs/**")
								.permitAll().anyRequest().authenticated())
				.exceptionHandling(
						exceptionHandlingCustomizer -> exceptionHandlingCustomizer
								.authenticationEntryPoint(
										authenticationEntryPoint)
								.accessDeniedHandler(accessDeniedHandler));
		return http.build();
	}

}
